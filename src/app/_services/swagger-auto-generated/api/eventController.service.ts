/**
 * HammerOn API: Easy control the band's songs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.6
 * Contact: kb.developer.br@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { EventWithMusicListDto } from '../model/eventWithMusicListDto';
import { ResponseDataEventDetailsDto } from '../model/responseDataEventDetailsDto';
import { ResponseDataEventDto } from '../model/responseDataEventDto';
import { ResponseDataListEventDto } from '../model/responseDataListEventDto';
import { ResponseDataVoid } from '../model/responseDataVoid';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EventControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createEvent
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEventUsingPOST(body?: EventWithMusicListDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataEventDto>;
    public createEventUsingPOST(body?: EventWithMusicListDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataEventDto>>;
    public createEventUsingPOST(body?: EventWithMusicListDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataEventDto>>;
    public createEventUsingPOST(body?: EventWithMusicListDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseDataEventDto>('post',`${this.basePath}/api/events`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteEvent
     * 
     * @param idEvent id-event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEventUsingDELETE(idEvent: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataVoid>;
    public deleteEventUsingDELETE(idEvent: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataVoid>>;
    public deleteEventUsingDELETE(idEvent: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataVoid>>;
    public deleteEventUsingDELETE(idEvent: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEvent === null || idEvent === undefined) {
            throw new Error('Required parameter idEvent was null or undefined when calling deleteEventUsingDELETE.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataVoid>('delete',`${this.basePath}/api/events/${encodeURIComponent(String(idEvent))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllEvents
     * 
     * @param nextEvents nextEvents
     * @param rangeDate rangeDate
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllEventsUsingGET(nextEvents: boolean, rangeDate?: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataListEventDto>;
    public findAllEventsUsingGET(nextEvents: boolean, rangeDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataListEventDto>>;
    public findAllEventsUsingGET(nextEvents: boolean, rangeDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataListEventDto>>;
    public findAllEventsUsingGET(nextEvents: boolean, rangeDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nextEvents === null || nextEvents === undefined) {
            throw new Error('Required parameter nextEvents was null or undefined when calling findAllEventsUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nextEvents !== undefined && nextEvents !== null) {
            queryParameters = queryParameters.set('nextEvents', <any>nextEvents);
        }
        if (rangeDate !== undefined && rangeDate !== null) {
            queryParameters = queryParameters.set('rangeDate', <any>rangeDate);
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataListEventDto>('get',`${this.basePath}/api/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findById
     * 
     * @param idEvent id-event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdUsingGET(idEvent: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataEventDetailsDto>;
    public findByIdUsingGET(idEvent: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataEventDetailsDto>>;
    public findByIdUsingGET(idEvent: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataEventDetailsDto>>;
    public findByIdUsingGET(idEvent: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEvent === null || idEvent === undefined) {
            throw new Error('Required parameter idEvent was null or undefined when calling findByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataEventDetailsDto>('get',`${this.basePath}/api/events/${encodeURIComponent(String(idEvent))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateEvent
     * 
     * @param idEvent id-event
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEventUsingPUT(idEvent: string, body?: EventWithMusicListDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataEventDto>;
    public updateEventUsingPUT(idEvent: string, body?: EventWithMusicListDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataEventDto>>;
    public updateEventUsingPUT(idEvent: string, body?: EventWithMusicListDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataEventDto>>;
    public updateEventUsingPUT(idEvent: string, body?: EventWithMusicListDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEvent === null || idEvent === undefined) {
            throw new Error('Required parameter idEvent was null or undefined when calling updateEventUsingPUT.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseDataEventDto>('put',`${this.basePath}/api/events/${encodeURIComponent(String(idEvent))}`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

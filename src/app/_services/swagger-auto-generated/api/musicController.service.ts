/**
 * HammerOn API: Easy control the band's songs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.4
 * Contact: kb.developer.br@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { MusicWithSingerAndLinksDto } from '../model/musicWithSingerAndLinksDto';
import { ResponseDataListMusicOnlyIdAndMusicNameAndSingerNameDto } from '../model/responseDataListMusicOnlyIdAndMusicNameAndSingerNameDto';
import { ResponseDataListMusicTopUsedDto } from '../model/responseDataListMusicTopUsedDto';
import { ResponseDataMusicDto } from '../model/responseDataMusicDto';
import { ResponseDataMusicWithSingerAndLinksDto } from '../model/responseDataMusicWithSingerAndLinksDto';
import { ResponseDataSetMusicWithSingerAndLinksDto } from '../model/responseDataSetMusicWithSingerAndLinksDto';
import { ResponseDataSetSingerDto } from '../model/responseDataSetSingerDto';
import { ResponseDataVoid } from '../model/responseDataVoid';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MusicControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createMusic
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMusicUsingPOST(body?: MusicWithSingerAndLinksDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataMusicWithSingerAndLinksDto>;
    public createMusicUsingPOST(body?: MusicWithSingerAndLinksDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataMusicWithSingerAndLinksDto>>;
    public createMusicUsingPOST(body?: MusicWithSingerAndLinksDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataMusicWithSingerAndLinksDto>>;
    public createMusicUsingPOST(body?: MusicWithSingerAndLinksDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseDataMusicWithSingerAndLinksDto>('post',`${this.basePath}/api/musics`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteMusic
     * 
     * @param idMusic id-music
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMusicUsingDELETE(idMusic: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataVoid>;
    public deleteMusicUsingDELETE(idMusic: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataVoid>>;
    public deleteMusicUsingDELETE(idMusic: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataVoid>>;
    public deleteMusicUsingDELETE(idMusic: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMusic === null || idMusic === undefined) {
            throw new Error('Required parameter idMusic was null or undefined when calling deleteMusicUsingDELETE.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataVoid>('delete',`${this.basePath}/api/musics/${encodeURIComponent(String(idMusic))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllMusic
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllMusicUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ResponseDataSetMusicWithSingerAndLinksDto>;
    public findAllMusicUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataSetMusicWithSingerAndLinksDto>>;
    public findAllMusicUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataSetMusicWithSingerAndLinksDto>>;
    public findAllMusicUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataSetMusicWithSingerAndLinksDto>('get',`${this.basePath}/api/musics`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllSinger
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllSingerUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ResponseDataSetSingerDto>;
    public findAllSingerUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataSetSingerDto>>;
    public findAllSingerUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataSetSingerDto>>;
    public findAllSingerUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataSetSingerDto>('get',`${this.basePath}/api/musics/singers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findById
     * 
     * @param idMusic id-music
     * @param eventsFromTheLast3Months eventsFromTheLast3Months
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdUsingGET1(idMusic: string, eventsFromTheLast3Months: boolean, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataMusicDto>;
    public findByIdUsingGET1(idMusic: string, eventsFromTheLast3Months: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataMusicDto>>;
    public findByIdUsingGET1(idMusic: string, eventsFromTheLast3Months: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataMusicDto>>;
    public findByIdUsingGET1(idMusic: string, eventsFromTheLast3Months: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMusic === null || idMusic === undefined) {
            throw new Error('Required parameter idMusic was null or undefined when calling findByIdUsingGET1.');
        }

        if (eventsFromTheLast3Months === null || eventsFromTheLast3Months === undefined) {
            throw new Error('Required parameter eventsFromTheLast3Months was null or undefined when calling findByIdUsingGET1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eventsFromTheLast3Months !== undefined && eventsFromTheLast3Months !== null) {
            queryParameters = queryParameters.set('eventsFromTheLast3Months', <any>eventsFromTheLast3Months);
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataMusicDto>('get',`${this.basePath}/api/musics/${encodeURIComponent(String(idMusic))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findMusicsAssociationForEventsBySpace
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findMusicsAssociationForEventsBySpaceUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ResponseDataListMusicOnlyIdAndMusicNameAndSingerNameDto>;
    public findMusicsAssociationForEventsBySpaceUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataListMusicOnlyIdAndMusicNameAndSingerNameDto>>;
    public findMusicsAssociationForEventsBySpaceUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataListMusicOnlyIdAndMusicNameAndSingerNameDto>>;
    public findMusicsAssociationForEventsBySpaceUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataListMusicOnlyIdAndMusicNameAndSingerNameDto>('get',`${this.basePath}/api/musics/association-for-events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findTop10MusicMoreUsedInEvents
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findTop10MusicMoreUsedInEventsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ResponseDataListMusicTopUsedDto>;
    public findTop10MusicMoreUsedInEventsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataListMusicTopUsedDto>>;
    public findTop10MusicMoreUsedInEventsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataListMusicTopUsedDto>>;
    public findTop10MusicMoreUsedInEventsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataListMusicTopUsedDto>('get',`${this.basePath}/api/musics/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateMusic
     * 
     * @param idMusic id-music
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMusicUsingPUT(idMusic: string, body?: MusicWithSingerAndLinksDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataMusicWithSingerAndLinksDto>;
    public updateMusicUsingPUT(idMusic: string, body?: MusicWithSingerAndLinksDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataMusicWithSingerAndLinksDto>>;
    public updateMusicUsingPUT(idMusic: string, body?: MusicWithSingerAndLinksDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataMusicWithSingerAndLinksDto>>;
    public updateMusicUsingPUT(idMusic: string, body?: MusicWithSingerAndLinksDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMusic === null || idMusic === undefined) {
            throw new Error('Required parameter idMusic was null or undefined when calling updateMusicUsingPUT.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseDataMusicWithSingerAndLinksDto>('put',`${this.basePath}/api/musics/${encodeURIComponent(String(idMusic))}`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateStatusMusic
     * 
     * @param idMusic id-music
     * @param newStatus new-status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStatusMusicUsingPUT(idMusic: string, newStatus: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseDataVoid>;
    public updateStatusMusicUsingPUT(idMusic: string, newStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDataVoid>>;
    public updateStatusMusicUsingPUT(idMusic: string, newStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDataVoid>>;
    public updateStatusMusicUsingPUT(idMusic: string, newStatus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMusic === null || idMusic === undefined) {
            throw new Error('Required parameter idMusic was null or undefined when calling updateStatusMusicUsingPUT.');
        }

        if (newStatus === null || newStatus === undefined) {
            throw new Error('Required parameter newStatus was null or undefined when calling updateStatusMusicUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (language) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["language"]) {
            queryParameters = queryParameters.set('language', this.configuration.apiKeys["language"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseDataVoid>('put',`${this.basePath}/api/musics/${encodeURIComponent(String(idMusic))}/status/${encodeURIComponent(String(newStatus))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
